# Ubuntu 20.04 Docker image for ARM64 Tauri app building
# Uses Ubuntu 20.04 for better ARM64 emulation compatibility on Windows Docker Desktop

FROM ubuntu:20.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Set up working directory
WORKDIR /app

# Install Tauri system dependencies in stages to avoid libc-bin crashes
# ARM64 emulation on Windows Docker Desktop is sensitive to package installation order
RUN apt-get update -y && \
    # Install base tools first
    apt-get install -y --no-install-recommends \
        curl wget ca-certificates gnupg lsb-release && \
    # Install build tools
    apt-get install -y --no-install-recommends \
        build-essential git pkg-config && \
    # Install Tauri dependencies (Ubuntu 20.04 uses webkit2gtk-4.0)
    apt-get install -y --no-install-recommends \
        libwebkit2gtk-4.0-dev \
        file \
        libxdo-dev \
        libssl-dev \
        libayatana-appindicator3-dev \
        librsvg2-dev \
        patchelf \
        sudo && \
    rm -rf /var/lib/apt/lists/* && \
    # Fix any package configuration issues
    dpkg --configure -a

# Install Node.js 20 (matching GitHub workflow)
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs

# Create non-root user for building with dynamic UID/GID
ARG USER_ID=1000
ARG GROUP_ID=1000
RUN EXISTING_GROUP=$(getent group ${GROUP_ID} | cut -d: -f1) && \
    if [ -n "$EXISTING_GROUP" ]; then \
        echo "Using existing group: $EXISTING_GROUP (GID: ${GROUP_ID})"; \
        useradd -m -s /bin/bash -u ${USER_ID} -g ${GROUP_ID} builder; \
    else \
        groupadd -g ${GROUP_ID} builder; \
        useradd -m -s /bin/bash -u ${USER_ID} -g ${GROUP_ID} builder; \
    fi && \
    usermod -aG sudo builder && \
    echo "builder ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Copy package files for dependency installation
COPY package*.json ./

# Install npm dependencies (matching GitHub workflow)
RUN npm ci --ignore-scripts

# Set up working directory with proper permissions
RUN mkdir -p /home/builder/app && chown -R ${USER_ID}:${GROUP_ID} /home/builder/app

# Switch to builder user for Rust installation
USER builder
WORKDIR /home/builder

# Install Rust as builder user (matching GitHub workflow - stable toolchain)
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
    . $HOME/.cargo/env && \
    rustc --version

# Set environment for native ARM64 compilation (not cross-compilation)
ENV PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1
ENV PKG_CONFIG_ALLOW_SYSTEM_LIBS=1

# Add Rust to PATH for builder user
ENV PATH="/home/builder/.cargo/bin:${PATH}"

# Set working directory
WORKDIR /home/builder/app

# Default command
CMD ["bash"]