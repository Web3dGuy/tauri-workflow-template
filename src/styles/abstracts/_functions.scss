// ==========================================================================
// FUNCTIONS
// ==========================================================================

@use 'sass:math';
@use 'sass:color';
@use 'sass:string';
@use 'sass:map';
@use 'sass:meta';

// Color Functions
// ==========================================================================

/// Slightly lighten a color
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function tint($color, $percentage) {
  @return color.mix(white, $color, $percentage);
}

/// Slightly darken a color
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function shade($color, $percentage) {
  @return color.mix(black, $color, $percentage);
}

/// Create a more transparent version of a color
/// @param {Color} $color - color to make transparent
/// @param {Number} $alpha - alpha value (0-1)
/// @return {Color}
@function transparentize-color($color, $alpha) {
  @return color.adjust($color, $alpha: - $alpha);
}

// Spacing Functions
// ==========================================================================

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }

  @return $number;
}

/// Convert px to rem
/// @param {Number} $px - pixel value
/// @param {Number} $base-font-size - base font size in px (default: 16px)
/// @return {Number} - rem value
@function px-to-rem($px, $base-font-size: 16px) {
  @return math.div(strip-unit($px), strip-unit($base-font-size)) * 1rem;
}

/// Convert rem to px
/// @param {Number} $rem - rem value
/// @param {Number} $base-font-size - base font size in px (default: 16px)
/// @return {Number} - px value
@function rem-to-px($rem, $base-font-size: 16px) {
  @return strip-unit($rem) * strip-unit($base-font-size) * 1px;
}

// String Functions
// ==========================================================================

/// Replace `$search` with `$replace` in `$string`
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace + str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
  }

  @return $string;
}

// Utility Functions
// ==========================================================================

/// Get a z-index value from a layer name
/// @param {String} $layer - Layer name
/// @return {Number} - z-index value
@function z-index($layer) {
  $z-indexes: (
    'dropdown': 1000,
    'sticky': 1020,
    'fixed': 1030,
    'modal-backdrop': 1040,
    'modal': 1050,
    'popover': 1060,
    'tooltip': 1070,
  );

  @if map.has-key($z-indexes, $layer) {
    @return map.get($z-indexes, $layer);
  }

  @warn 'Unknown z-index layer: #{$layer}';
  @return null;
}

/// Calculate fluid typography
/// @param {Number} $min-size - Minimum font size
/// @param {Number} $max-size - Maximum font size
/// @param {Number} $min-width - Minimum viewport width
/// @param {Number} $max-width - Maximum viewport width
/// @return {String} - Clamp function for fluid typography
@function fluid-type($min-size, $max-size, $min-width: 320px, $max-width: 1200px) {
  $slope: math.div(strip-unit($max-size) - strip-unit($min-size), strip-unit($max-width) - strip-unit($min-width));
  $intercept: strip-unit($min-size) - $slope * strip-unit($min-width);
  
  @return clamp(#{$min-size}, #{$intercept}px + #{$slope * 100}vw, #{$max-size});
} 
