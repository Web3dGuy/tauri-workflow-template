@use 'sass:math';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:color';
@use 'sass:list';

// =================================
// Tauri Workflow Template - Modern SCSS Functions
// Utility functions for accessing design tokens and calculations
// =================================

// =================================
// DESIGN TOKEN ACCESS FUNCTIONS
// =================================

// Color function - access colors from the color map
@function color($color-name, $shade: null) {
  // Define the color map inline to avoid circular dependencies
  $local-colors: (
    slate: (
      50: #f8fafc,
      100: #f1f5f9,
      200: #e2e8f0,
      300: #cbd5e1,
      400: #94a3b8,
      500: #64748b,
      600: #475569,
      700: #334155,
      800: #1e293b,
      900: #0f172a
    ),
    primary: (
      light: #60a5fa,
      base: #3b82f6,
      dark: #1e40af
    ),
    semantic: (
      success: #10b981,
      success-dark: #059669,
      warning: #f59e0b,
      danger: #ef4444,
      danger-dark: #dc2626
    ),
    // Direct access to semantic colors
    success: (
      base: #10b981,
      dark: #059669
    ),
    danger: (
      base: #ef4444,
      dark: #dc2626
    ),
    warning: (
      base: #f59e0b
    )
  );
  
  @if map.has-key($local-colors, $color-name) {
    $color-palette: map.get($local-colors, $color-name);
    
    @if $shade {
      @if map.has-key($color-palette, $shade) {
        @return map.get($color-palette, $shade);
      } @else {
        @warn "Shade `#{$shade}` not found in color `#{$color-name}`";
        @return null;
      }
    } @else {
      // If no shade specified, return the base color for semantic colors or the 500 shade for color palettes
      @if map.has-key($color-palette, base) {
        @return map.get($color-palette, base);
      } @else if map.has-key($color-palette, 500) {
        @return map.get($color-palette, 500);
      } @else {
        @return $color-palette;
      }
    }
  } @else {
    @warn "Color `#{$color-name}` not found in color system";
    @return null;
  }
}

// Spacing function - access spacing from spacing scale
@function spacing($key) {
  $local-spacing: (
    0: 0,
    1: 0.25rem,  // 4px
    2: 0.5rem,   // 8px
    3: 0.75rem,  // 12px
    4: 1rem,     // 16px
    5: 1.25rem,  // 20px
    6: 1.5rem,   // 24px
    8: 2rem,     // 32px
    10: 2.5rem,  // 40px
    12: 3rem,    // 48px
    16: 4rem,    // 64px
    20: 5rem     // 80px
  );
  
  @if map.has-key($local-spacing, $key) {
    @return map.get($local-spacing, $key);
  } @else {
    @warn "Spacing key `#{$key}` not found";
    @return 1rem;
  }
}

// Font size function
@function font-size($size) {
  $local-font-sizes: (
    xs: 0.75rem,    // 12px
    sm: 0.875rem,   // 14px
    base: 1rem,     // 16px
    lg: 1.125rem,   // 18px
    xl: 1.25rem,    // 20px
    2xl: 1.5rem,    // 24px
    3xl: 1.875rem,  // 30px
    4xl: 2.25rem,   // 36px
    5xl: 3rem       // 48px
  );
  
  @if map.has-key($local-font-sizes, $size) {
    @return map.get($local-font-sizes, $size);
  } @else {
    @warn "Font size `#{$size}` not found";
    @return 1rem;
  }
}

// Shadow function
@function shadow($size) {
  $local-shadows: (
    sm: (0 2px 4px rgb(0 0 0 / 10%)),
    md: (0 4px 8px rgb(0 0 0 / 15%)),
    lg: (0 8px 24px rgb(0 0 0 / 30%)),
    xl: (0 12px 32px rgb(0 0 0 / 40%)),
    2xl: (0 20px 48px rgb(0 0 0 / 60%)),
    inset: (inset 0 2px 8px rgb(0 0 0 / 30%))
  );
  
  @if map.has-key($local-shadows, $size) {
    @return map.get($local-shadows, $size);
  } @else {
    @warn "Shadow size `#{$size}` not found";
    @return (0 4px 8px rgba(0, 0, 0, 0.15));
  }
}

// Border radius function
@function radius($size) {
  $local-radius: (
    none: 0,
    sm: 0.25rem,   // 4px
    md: 0.5rem,    // 8px
    lg: 0.75rem,   // 12px
    xl: 1rem,      // 16px
    full: 50%
  );
  
  @if map.has-key($local-radius, $size) {
    @return map.get($local-radius, $size);
  } @else {
    @warn "Radius size `#{$size}` not found";
    @return 0.5rem;
  }
}

// Breakpoint function
@function breakpoint($bp) {
  $local-breakpoints: (
    sm: 640px,
    md: 768px,
    lg: 1024px,
    xl: 1280px,
    2xl: 1536px
  );
  
  @if map.has-key($local-breakpoints, $bp) {
    @return map.get($local-breakpoints, $bp);
  } @else {
    @warn "Breakpoint `#{$bp}` not found";
    @return 768px;
  }
}

// Transition function
@function transition($speed: normal) {
  $local-transitions: (
    fast: 0.15s ease,
    normal: 0.3s ease,
    slow: 0.5s ease,
    bounce: 0.3s cubic-bezier(0.34, 1.56, 0.64, 1)
  );
  
  @if map.has-key($local-transitions, $speed) {
    @return map.get($local-transitions, $speed);
  } @else {
    @warn "Transition speed `#{$speed}` not found";
    @return 0.3s ease;
  }
}

// Z-index function
@function z-index($layer) {
  $local-z-index: (
    behind: -1,
    base: 0,
    console: 1,
    dropdown: 10,
    sticky: 20,
    fixed: 30,
    sidebar-mobile: 50,
    navbar: 100,
    snap-indicator: 999,
    dragging: 1000,
    modal: 1050,
    popover: 1100,
    tooltip: 1200
  );
  
  @if map.has-key($local-z-index, $layer) {
    @return map.get($local-z-index, $layer);
  } @else {
    @warn "Z-index layer `#{$layer}` not found";
    @return 0;
  }
}

// =================================
// LAYOUT CALCULATION FUNCTIONS
// =================================

// Calculate responsive font size with clamp
@function fluid($min-size, $max-size, $min-width: 320px, $max-width: 1200px) {
  // Simplified approach to avoid complex calculations
  @return clamp(#{$min-size}, #{$min-size} + (#{$max-size} - #{$min-size}) * ((100vw - #{$min-width}) / (#{$max-width} - #{$min-width})), #{$max-size});
}

// Convert pixels to rem
@function px-to-rem($px, $base-font-size: 16px) {
  @return math.div($px, $base-font-size) * 1rem;
}

// Convert rem to pixels
@function rem-to-px($rem, $base-font-size: 16px) {
  @return $rem * $base-font-size;
}

// Calculate golden ratio
@function golden-ratio($value, $increment: 1) {
  $golden: 1.618;

  @return $value * math.pow($golden, $increment);
}

// =================================
// COLOR MANIPULATION FUNCTIONS
// =================================

// Alpha/transparency function (replacement for deprecated alpha())
@function alpha($color, $alpha-value) {
  @if not $color {
    @warn "Alpha function received null color, using transparent fallback";
    @return transparent;
  }

  @return rgba($color, $alpha-value);
}

// Lighten color by percentage
@function lighten-color($color, $percentage) {
  @return color.adjust($color, $lightness: $percentage);
}

// Darken color by percentage  
@function darken-color($color, $percentage) {
  @return color.adjust($color, $lightness: - $percentage);
}

// =================================
// ACCESSIBILITY FUNCTIONS
// =================================

// Calculate contrast ratio
@function contrast-ratio($color1, $color2) {
  $l1: color.lightness($color1);
  $l2: color.lightness($color2);
  
  @if $l1 > $l2 {
    @return math.div($l1 + 5, $l2 + 5);
  } @else {
    @return math.div($l2 + 5, $l1 + 5);
  }
}

// Get accessible text color for background
@function text-color($bg-color, $light-color: #ffffff, $dark-color: #000000) {
  $light-contrast: contrast-ratio($bg-color, $light-color);
  $dark-contrast: contrast-ratio($bg-color, $dark-color);
  
  @if $light-contrast > $dark-contrast {
    @return $light-color;
  } @else {
    @return $dark-color;
  }
}

// =================================
// ANIMATION & TIMING FUNCTIONS
// =================================

// Easing functions
@function ease-in-out-cubic() {
  @return cubic-bezier(0.645, 0.045, 0.355, 1);
}

@function ease-in-out-quart() {
  @return cubic-bezier(0.770, 0, 0.175, 1);
}

@function ease-out-back() {
  @return cubic-bezier(0.34, 1.56, 0.64, 1);
}

// =================================
// VALIDATION FUNCTIONS
// =================================

// Check if value is valid length unit
@function is-length($value) {
  @return meta.type-of($value) == "number" and not math.is-unitless($value);
}

// Check if value is valid color
@function is-color($value) {
  @return meta.type-of($value) == "color";
}

// Check if value is valid number
@function is-number($value) {
  @return meta.type-of($value) == "number";
}

// Validate and return fallback if invalid
@function validate($value, $fallback, $type: null) {
  @if $type == "length" and not is-length($value) {
    @return $fallback;
  } @else if $type == "color" and not is-color($value) {
    @return $fallback;
  } @else if $type == "number" and not is-number($value) {
    @return $fallback;
  }
  
  @return $value;
} 