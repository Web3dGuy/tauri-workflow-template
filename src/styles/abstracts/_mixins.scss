// ==========================================================================
// MIXINS
// ==========================================================================

@use 'sass:map';
@use 'variables' as *;
@use 'breakpoints' as *;

// Layout Mixins
// ==========================================================================

/// Center an element both horizontally and vertically
@mixin center-absolute {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/// Center an element horizontally and vertically using flexbox
@mixin center-flex {
  display: flex;
  align-items: center;
  justify-content: center;
}

/// Create a flex container with common properties
@mixin flex($direction: row, $wrap: nowrap, $justify: flex-start, $align: stretch) {
  display: flex;
  flex-flow: $direction $wrap;
  justify-content: $justify;
  align-items: $align;
}

/// Truncate text with ellipsis
@mixin text-truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/// Visually hide an element but keep it accessible to screen readers
@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

// Typography Mixins
// ==========================================================================

/// Set font smoothing for better text rendering
@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/// Create responsive typography
@mixin responsive-text($min-size, $max-size) {
  font-size: clamp($min-size, 4vw, $max-size);
}

// Component Mixins
// ==========================================================================

/// Create a button base style
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: $spacing-2;
  padding: $spacing-2 $spacing-4;
  border: 1px solid transparent;
  border-radius: $border-radius-md;
  background: transparent;
  color: inherit;
  font-family: inherit;
  font-size: $font-size-sm;
  font-weight: $font-weight-medium;
  line-height: 1;
  cursor: pointer;
  transition: $transition-all;
  user-select: none;
  text-decoration: none;

  &:focus {
    outline: 2px solid $color-primary;
    outline-offset: 2px;
  }

  &:disabled {
    pointer-events: none;
    opacity: 0.5;
  }
}

/// Create button variants
@mixin button-variant($bg-color, $text-color: #fff, $border-color: $bg-color) {
  background-color: $bg-color;
  color: $text-color;
  border-color: $border-color;

  &:hover:not(:disabled) {
    background-color: rgba($bg-color, 0.9);
    border-color: rgba($border-color, 0.9);
  }

  &:active:not(:disabled) {
    background-color: rgba($bg-color, 0.8);
    border-color: rgba($border-color, 0.8);
    transform: translateY(1px);
  }
}

/// Create input base style
@mixin input-base {
  display: block;
  width: 100%;
  padding: $spacing-3;
  border: 1px solid var(--bp-border-color, $color-gray-300);
  border-radius: $border-radius-md;
  background-color: var(--bp-background-color, white);
  color: var(--bp-text-color, $color-gray-900);
  font-family: inherit;
  font-size: $font-size-sm;
  line-height: $line-height-normal;
  transition: $transition-colors;

  &::placeholder {
    color: var(--bp-text-color-muted, $color-gray-500);
  }

  &:focus {
    outline: none;
    border-color: $color-primary;
    box-shadow: 0 0 0 3px rgba($color-primary, 0.1);
  }

  &:disabled {
    background-color: var(--bp-background-color-secondary, $color-gray-50);
    color: var(--bp-text-color-muted, $color-gray-500);
    cursor: not-allowed;
  }
}

/// Create card style
@mixin card($padding: $spacing-6) {
  background: var(--bp-background-color, white);
  border: 1px solid var(--bp-border-color, $color-gray-200);
  border-radius: $border-radius-lg;
  box-shadow: $shadow-sm;
  padding: $padding;
}

// Animation Mixins
// ==========================================================================

/// Create a fade-in animation
@mixin fade-in($duration: $animation-duration-fade) {
  animation: fade-in $duration ease-out;
}

/// Create a slide-up animation
@mixin slide-up($duration: $animation-duration-slide) {
  animation: slide-up $duration ease-out;
}

/// Create a loading pulse animation
@mixin pulse($duration: 2s) {
  animation: pulse $duration ease-in-out infinite;
}

// Responsive Mixins
// ==========================================================================

/// Media query mixin
@mixin media($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn 'Unknown breakpoint: #{$breakpoint}';
  }
}

/// Media query for max-width
@mixin media-down($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (max-width: map.get($breakpoints, $breakpoint) - 1px) {
      @content;
    }
  } @else {
    @warn 'Unknown breakpoint: #{$breakpoint}';
  }
}

/// Media query for between two breakpoints
@mixin media-between($min-breakpoint, $max-breakpoint) {
  @if map.has-key($breakpoints, $min-breakpoint) and map.has-key($breakpoints, $max-breakpoint) {
    @media (min-width: map.get($breakpoints, $min-breakpoint)) and (max-width: map.get($breakpoints, $max-breakpoint) - 1px) {
      @content;
    }
  } @else {
    @warn 'Unknown breakpoint(s): #{$min-breakpoint}, #{$max-breakpoint}';
  }
}

// Chat-specific Mixins
// ==========================================================================

/// Create chat bubble style
@mixin chat-bubble($is-own: false) {
  max-width: $chat-message-max-width;
  padding: $spacing-2 $spacing-3;
  border-radius: $chat-bubble-border-radius;
  word-wrap: break-word;
  box-shadow: $shadow-sm;
  transition: $transition-all;

  @if $is-own {
    background: $color-primary;
    color: #fff;
    margin-left: auto;
  } @else {
    background: var(--bp-background-color-secondary, $color-gray-100);
    color: var(--bp-text-color, $color-gray-900);
    margin-right: auto;
  }

  &:hover {
    transform: translateY(-1px);
    box-shadow: $shadow-md;
  }
}

/// Create avatar style
@mixin avatar($size: $chat-avatar-size-md) {
  width: $size;
  height: $size;
  border-radius: 50%;
  overflow: hidden;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: #fff;
  font-weight: $font-weight-semibold;
  user-select: none;
}

/// Create status indicator
@mixin status-indicator($size: 12px) {
  width: $size;
  height: $size;
  border-radius: 50%;
  border: 2px solid var(--bp-background-color, white);
  position: absolute;
  bottom: -2px;
  right: -2px;
  
  &.online { background-color: $color-online; }
  &.away { background-color: $color-away; }
  &.busy { background-color: $color-busy; }
  &.offline { background-color: $color-offline; }
}

// Scrollbar Mixins
// ==========================================================================

/// Custom scrollbar styling
@mixin custom-scrollbar($width: 6px, $track-color: transparent, $thumb-color: var(--bp-border-color, $color-gray-300)) {
  scrollbar-width: thin;
  scrollbar-color: $thumb-color $track-color;

  &::-webkit-scrollbar {
    width: $width;
    height: $width;
  }

  &::-webkit-scrollbar-track {
    background: $track-color;
  }

  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: 3px;
    
    &:hover {
      background: rgb(0 0 0 / 50%);
    }
  }
} 
